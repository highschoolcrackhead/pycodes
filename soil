#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>

// WiFi credentials
const char* ssid = "YourWiFiSSID";
const char* password = "YourWiFiPassword";

// Pin definitions
#define TEMP_PIN 4
#define MQ135_PIN 34
#define LDR_PIN 35
#define PIR_PIN 13
#define RAINDROP_PIN 14
#define SOIL_MOISTURE_PIN 32

// Soil moisture calibration values
int airValue = 3200;   // Value in air (dry)
int waterValue = 1400; // Value in water (wet)

AsyncWebServer server(80);

String getTemperature() {
  int rawTemp = analogRead(TEMP_PIN);
  float voltage = rawTemp * (3.3 / 4095.0);
  float temperature = (voltage - 0.5) * 100;
  return String(temperature);
}

String getHumidity() {
  // Placeholder function
  return "50.0";
}

String getLightLevel() {
  return String(analogRead(LDR_PIN));
}

String getMotion() {
  return digitalRead(PIR_PIN) ? "Yes" : "No";
}

String getSoilMoisture() {
  int soilMoisture = analogRead(SOIL_MOISTURE_PIN);
  int soilMoisturePercent = map(soilMoisture, airValue, waterValue, 0, 100);
  soilMoisturePercent = constrain(soilMoisturePercent, 0, 100);
  return String(soilMoisturePercent);
}

String getRain() {
  return !digitalRead(RAINDROP_PIN) ? "Yes" : "No";
}

String getCO2Level() {
  return String(analogRead(MQ135_PIN));
}

String getSmokeLevel() {
  return String(analogRead(MQ135_PIN));
}

const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML>
<html>
<head>
  <title>ESP32 Sensor Hub</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    html { font-family: Arial; display: inline-block; text-align: center; }
    h2 { font-size: 2.3rem; }
    p { font-size: 1.9rem; }
    body { max-width: 400px; margin:0px auto; padding-bottom: 25px; }
    .switch { position: relative; display: inline-block; width: 60px; height: 34px; } 
    .switch input { display: none; }
    .slider { position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color: #ccc; border-radius: 34px; }
    .slider:before { position: absolute; content: ""; height: 26px; width: 26px; left: 4px; bottom: 4px; background-color: #fff; transition: .4s; border-radius: 50%; }
    input:checked+.slider { background-color: #2196F3; }
    input:checked+.slider:before { transform: translateX(26px); }
    .slider.round { border-radius: 34px; }
    .slider.round:before { border-radius: 50%; }
  </style>
</head>
<body>
  <h2>ESP32 Sensor Hub</h2>
  <p>
    <i class="fas fa-thermometer-half" style="color:#059e8a;"></i> 
    <span class="dht-labels">Temperature</span> 
    <span id="temperature">%TEMPERATURE%</span>
    <sup class="units">&deg;C</sup>
  </p>
  <p>
    <i class="fas fa-tint" style="color:#00add6;"></i> 
    <span class="dht-labels">Humidity</span>
    <span id="humidity">%HUMIDITY%</span>
    <sup class="units">%</sup>
  </p>
  <p>
    <i class="fas fa-sun" style="color:#ff8c00;"></i> 
    <span class="dht-labels">Light Level</span>
    <span id="light">%LIGHT%</span>
  </p>
  <p>
    <i class="fas fa-running" style="color:#3cb371;"></i> 
    <span class="dht-labels">Motion</span>
    <span id="motion">%MOTION%</span>
  </p>
  <p>
    <i class="fas fa-water" style="color:#4169e1;"></i> 
    <span class="dht-labels">Soil Moisture</span>
    <span id="soil">%SOIL%</span>
    <sup class="units">%</sup>
  </p>
  <p>
    <i class="fas fa-cloud-rain" style="color:#4682b4;"></i> 
    <span class="dht-labels">Rain</span>
    <span id="rain">%RAIN%</span>
  </p>
  <p>
    <i class="fas fa-smog" style="color:#708090;"></i> 
    <span class="dht-labels">CO2 Level</span>
    <span id="co2">%CO2%</span>
  </p>
  <p>
    <i class="fas fa-smoke" style="color:#a9a9a9;"></i> 
    <span class="dht-labels">Smoke Level</span>
    <span id="smoke">%SMOKE%</span>
  </p>
</body>
<script>
setInterval(function ( ) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("temperature").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "/temperature", true);
  xhttp.send();
}, 10000 );

setInterval(function ( ) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("humidity").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "/humidity", true);
  xhttp.send();
}, 10000 );

setInterval(function ( ) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("light").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "/light", true);
  xhttp.send();
}, 10000 );

setInterval(function ( ) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("motion").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "/motion", true);
  xhttp.send();
}, 10000 );

setInterval(function ( ) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("soil").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "/soil", true);
  xhttp.send();
}, 10000 );

setInterval(function ( ) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("rain").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "/rain", true);
  xhttp.send();
}, 10000 );

setInterval(function ( ) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("co2").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "/co2", true);
  xhttp.send();
}, 10000 );

setInterval(function ( ) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("smoke").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "/smoke", true);
  xhttp.send();
}, 10000 );
</script>
</html>
)rawliteral";

String processor(const String& var){
  if(var == "TEMPERATURE"){
    return getTemperature();
  }
  else if(var == "HUMIDITY"){
    return getHumidity();
  }
  else if(var == "LIGHT"){
    return getLightLevel();
  }
  else if(var == "MOTION"){
    return getMotion();
  }
  else if(var == "SOIL"){
    return getSoilMoisture();
  }
  else if(var == "RAIN"){
    return getRain();
  }
  else if(var == "CO2"){
    return getCO2Level();
  }
  else if(var == "SMOKE"){
    return getSmokeLevel();
  }
  return String();
}

void setup(){
  Serial.begin(115200);
  
  // Initialize sensors
  pinMode(PIR_PIN, INPUT);
  pinMode(RAINDROP_PIN, INPUT);
  
  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }

  // Print ESP32 Local IP Address
  Serial.println(WiFi.localIP());

  // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html, processor);
  });
  server.on("/temperature", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", getTemperature().c_str());
  });
  server.on("/humidity", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", getHumidity().c_str());
  });
  server.on("/light", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", getLightLevel().c_str());
  });
  server.on("/motion", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", getMotion().c_str());
  });
  server.on("/soil", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", getSoilMoisture().c_str());
  });
  server.on("/rain", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", getRain().c_str());
  });
  server.on("/co2", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", getCO2Level().c_str());
  });
  server.on("/smoke", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", getSmokeLevel().c_str());
  });

  // Start server
  server.begin();
}
 
void loop(){
  // The ESPAsyncWebServer handles clients automatically in the background.
  // You can perform any other tasks here if needed.
  delay(1000);
}
